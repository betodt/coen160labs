package edu.scu.coen160.lab7;

import java.util.LinkedHashMap;
import java.util.Map;
import java.awt.*;
import java.awt.geom.*;
import java.awt.event.*;

// Java extension packages
import javax.swing.*;

class BarCharts extends JPanel
{
	private DataManager dManager;
	private Map<Color, Sales> bars ;
	private boolean ok = false;

	public BarCharts(DataManager dm)
	{
		dManager = dm;
		setPreferredSize(new Dimension(500,500));
		bars = dManager.getData();
	}
	
	/**
	 * Add new bar to chart
	 * @param color color to display bar
	 * @param value size of bar
	 */
	
    public void displayGraph(){
    	ok = true;
    	repaint();
    }
    private void drawTitlePage(Graphics2D g)
	{
		 g.setPaint(Color.blue);           
         g.setFont(new Font("Verdana",Font.ITALIC,20));
         g.drawString( "AlphaBeta Inc.", 200, 200 );
         
         g.setPaint(Color.black);          
         g.setFont(new Font("Georgia",Font.PLAIN,20));
         g.drawString( "Sales Data -", 200, 300 );
         
         g.setPaint(Color.red);         
         g.setFont(new Font("Comic Sans MS",Font.PLAIN,28));
         g.drawString( "2011", 310, 300 );
         
	}
	private void drawBarGraph(Graphics2D g)
	{
		// determine longest bar

		int max = Integer.MIN_VALUE;
		for (Sales saleByQuarter : bars.values())
		{
			max = Math.max(max, saleByQuarter.getAmount());
		}
		// paint bars

		int width = (getWidth() / bars.size()) - 100;
		int x = 1;
		int i = 0;
		for (Color color : bars.keySet())
		{
			Sales value = bars.get(color);
			int height = (int)
                            ((getHeight()-20) * ((double)value.getAmount() / max));
            
			g.setColor(color);
			g.fillRect(x, getHeight() - height, width, height);
			g.setColor(Color.black);
			
			g.setFont(new Font("Verdana",Font.PLAIN,20));
	        g.drawString( bars.keySet(), x + width/2 - 2, getHeight()/2 );			
			g.drawRect(x, getHeight() - height, width, height);
			x += (width + 2);
			i++;
		}
	}
	@Override
	protected void paintComponent(Graphics gp)
	{ 
		super.paintComponent(gp);
         
         // Cast the graphics objects to Graphics2D
         
         Graphics2D g = (Graphics2D) gp;
		 g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
         g.setStroke(new BasicStroke(2.0f));
		
		 if (ok)
			drawBarGraph(g);
		 else
		 	drawTitlePage(g);
	}
	@Override
	public Dimension getPreferredSize() {
		return new Dimension(bars.size() * 10 + 2, 50);
	}
}

public class SalesGraph extends JFrame implements ActionListener {
		
	private DataManager dataManager = new DataManager();
	private JPanel buttonPanel;
	private JButton showButton;
	private BarCharts chart;
	
	public SalesGraph(){
		super ("Bar Chart");
		
		setPreferredSize(new Dimension(800,800));
		setLocationRelativeTo(null);
		
        dataManager.readDataFromFile("sales.txt");
        
	    chart = new BarCharts(dataManager);
	
		// Exercise 1a. Add the chart to the 
		// NORTH. Compile and run the program. Click the 
		// button to display the graph. 
		
	    //AD Changed this to the north
	    //I see the graph, but hello world went away
	    //graph is also reduced in sized
		getContentPane().add(chart,BorderLayout.CENTER);
		
		createButtonPanel();
		getContentPane().add(buttonPanel,BorderLayout.SOUTH);
		
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		pack();
		setVisible(true);
		
	}
	public void createButtonPanel()
	{
		//create and place the show button
        buttonPanel = new JPanel(new FlowLayout());
        showButton = new JButton("ShowGraph");
        showButton.addActionListener(this);
        buttonPanel.add(showButton);     
		
	}
	public void actionPerformed(ActionEvent event) {   
        chart.displayGraph();
    }

	public static void main(String[] args)
	{
		new SalesGraph();		
	}		
}

